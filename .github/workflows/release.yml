name: 🎉 Release
run-name: Release triggered by ${{ github.actor }}
on:
  workflow_dispatch:
  workflow_call:
  push:
      tags:
        - "v**"
jobs:
  build-arch:
    name: 🏗 Build for Arch Linux
    runs-on: ubuntu-latest
    container: 
      image: rebornos/rebornos:latest
      ports:
        - 80
    steps:
      - name: 🐋 Initialize RebornOS Docker Container 
        id: init_docker_step           
        run: sh /usr/bin/init-rebornos-docker.sh
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v3
      - name: 🛠 Build Package
        id: build_package_step        
        run: |
          sudo pacman -S --needed --noconfirm tree
          chown -R rebornos packaging
          chmod -R +x packaging
          sudo -u rebornos sh -c "packaging/arch/build_package.sh stable --noconfirm"
          ls -ltr packaging/arch/python-pysetting/
          tree -L 2 packaging/arch/python-pysetting/
      - name: ⬆ Upload Package Artifact
        id: upload_package_step
        uses: actions/upload-artifact@v3
        with: 
          name: Stable Arch Package
          path: |
            packaging/arch/python-pysetting/*.pkg.tar.*
          if-no-files-found: error
  build-debian:
    name: 🏗 Build for Debian
    runs-on: ubuntu-latest
    steps:
      - name: 🎟 Checkout Git Repository
        uses: actions/checkout@v3
      - name: 🛠 Build Package
        run: |
          cd packaging/debian/python3-${{ github.event.repository.name }}
          sudo apt-get update
          sudo apt-get build-dep --no-install-recommends -y .
          make all deb
      - name: Workaround actions/upload-artifact#176
        run: |
          echo "artifacts_path=$(realpath packaging/debian/)" >> $GITHUB_ENV
      - name: ⬆ Upload Package Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Stable Debian Package
          path: |
            ${{ env.artifacts_path }}/*.deb
          if-no-files-found: error
  release:  
    needs: [build-arch, build-debian]
    name: 🎉 Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 🎟 Checkout Git Repository
        id: checkout_repository_step
        uses: actions/checkout@v3
      - name:  🏷 Determine Tags and Versions
        id: set_versions_step
        run: |
          git fetch --prune --unshallow --tags -f
          LATEST_TAG="$(git tag | grep -v -P '^v([0-9]+)\.([0-9]+)\.([0-9]+).*\.' | grep -v -P '^v([0-9]+)\.([0-9]+)\.([0-9]+).*\.' | grep -v -P '^v([0-9]+)\.([0-9]+)\.([0-9]+)_$' | sort --version-sort | tail -n1)"
          GIT_VERSION="$(git describe --long 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' || printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)")"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV 
          echo "GIT_VERSION=$GIT_VERSION" >> $GITHUB_ENV 
          echo "LATEST_TAG=$LATEST_TAG"
          echo "GIT_VERSION=$GIT_VERSION"
      - name: ⬇ Download Arch Package Artifact
        id: download_arch_package_step         
        uses: actions/download-artifact@v3
        with:
          name: Stable Arch Package
          path: output-arch
      - name: ⬇ Download Debian Package Artifact
        id: download_deb_package_step
        uses: actions/download-artifact@v3
        with:
          name: Stable Debian Package
          path: output-debian
      - name: �� Generate CheckSums
        id: generate_checksum_step
        run: |
          cd ${{ steps.download_arch_package_step.outputs.download-path }}
          ls -ltr ${{ steps.download_arch_package_step.outputs.download-path }}
          find . -type f -exec sh -c 'sha256sum "$0" > "$0.sha256sum"' {} \;
          cd ${{ steps.download_deb_package_step.outputs.download-path }}
          ls -ltr ${{ steps.download_deb_package_step.outputs.download-path }}
          find . -type f -exec sh -c 'sha256sum "$0" > "$0.sha256sum"' {} \;
      - name: 🎉 Create Release
        id: create_release_step
        uses: softprops/action-gh-release@v1
        with:          
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: false
          append_body: false
          body_path: CHANGELOG.md
          tag_name: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}
          files: |
            ${{ steps.download_arch_package_step.outputs.download-path }}/*.pkg*
            ${{ steps.download_deb_package_step.outputs.download-path }}/*.deb*
